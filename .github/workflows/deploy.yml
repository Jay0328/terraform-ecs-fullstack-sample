name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 16.17.0
  PNPM_VERSION: 7.12.2
  PROJECT: just-test
  ENV: dev
  AWS_REGION: ap-southeast-1

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      affected-projects: ${{ steps.affected-projects.outputs.projects }}
      no-affected: ${{ steps.affected-projects.outputs.no-affected }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout
        if: ${{ github.event_name != 'pull_request' }}
        with:
          lfs: 'true'
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - uses: actions/checkout@v3
        name: Checkout (Pull Request)
        if: ${{ github.event_name == 'pull_request' }}
        with:
          lfs: 'true'
          # By default, PRs will be checked-out based on the Merge Commit, but we want the actual branch HEAD.
          ref: ${{ github.event.pull_request.head.sha }}
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
      - name: Setup Node
        id: setup-node
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
      - name: Install Dependencies
        uses: ./.github/actions/install-node-dependencies
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: main
      - name: Get affected projects
        id: affected-projects
        uses: ./.github/actions/nx-affected-projects
        with:
          target: build
          type: app
      - name: Build
        if: ${{ steps.affected-projects.outputs.no-affected != 'true' }}
        run: npx nx affected --target=build --parallel=3
      - uses: actions/upload-artifact@v3
        if: ${{ steps.affected-projects.outputs.no-affected != 'true' }}
        with:
          name: dist
          path: dist
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.no-affected != 'true' }}
    strategy:
      matrix:
        app: ${{ fromJson(needs.build.outputs.affected-projects) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Build and push image to Amazon ECR
        id: build-image
        uses: ./.github/actions/web-build-push-ecr
        with:
          context: .
          file: ./docker/${{ env.ENV }}/${{ matrix.app }}.Dockerfile
          tag: ${{ env.ENV }}-${{ github.sha }}
          repository: ${{ env.PROJECT }}-${{ matrix.app }}
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.PROJECT }}-${{ matrix.app }}-${{ env.ENV }} --query taskDefinition > task-definition.json
          cat task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.PROJECT }}-${{ matrix.app }}-${{ env.ENV }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.PROJECT }}-${{ matrix.app }}-${{ env.ENV }}
          cluster: ${{ env.PROJECT }}-${{ env.ENV }}
          wait-for-service-stability: true
